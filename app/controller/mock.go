// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package controller

import (
	"net/url"
	"sync"

	"github.com/mimomomimo/web-service-gin/app/model"
)

// Ensure, that RepositoryInterfaceMock does implement RepositoryInterface.
// If this is not the case, regenerate this file with moq.
var _ RepositoryInterface = &RepositoryInterfaceMock{}

// RepositoryInterfaceMock is a mock implementation of RepositoryInterface.
//
// 	func TestSomethingThatUsesRepositoryInterface(t *testing.T) {
//
// 		// make and configure a mocked RepositoryInterface
// 		mockedRepositoryInterface := &RepositoryInterfaceMock{
// 			FetchVolumesFunc: func(values url.Values) ([]model.Book, error) {
// 				panic("mock out the FetchVolumes method")
// 			},
// 		}
//
// 		// use mockedRepositoryInterface in code that requires RepositoryInterface
// 		// and then make assertions.
//
// 	}
type RepositoryInterfaceMock struct {
	// FetchVolumesFunc mocks the FetchVolumes method.
	FetchVolumesFunc func(values url.Values) ([]model.Book, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchVolumes holds details about calls to the FetchVolumes method.
		FetchVolumes []struct {
			// Values is the values argument value.
			Values url.Values
		}
	}
	lockFetchVolumes sync.RWMutex
}

// FetchVolumes calls FetchVolumesFunc.
func (mock *RepositoryInterfaceMock) FetchVolumes(values url.Values) ([]model.Book, error) {
	if mock.FetchVolumesFunc == nil {
		panic("RepositoryInterfaceMock.FetchVolumesFunc: method is nil but RepositoryInterface.FetchVolumes was just called")
	}
	callInfo := struct {
		Values url.Values
	}{
		Values: values,
	}
	mock.lockFetchVolumes.Lock()
	mock.calls.FetchVolumes = append(mock.calls.FetchVolumes, callInfo)
	mock.lockFetchVolumes.Unlock()
	return mock.FetchVolumesFunc(values)
}

// FetchVolumesCalls gets all the calls that were made to FetchVolumes.
// Check the length with:
//     len(mockedRepositoryInterface.FetchVolumesCalls())
func (mock *RepositoryInterfaceMock) FetchVolumesCalls() []struct {
	Values url.Values
} {
	var calls []struct {
		Values url.Values
	}
	mock.lockFetchVolumes.RLock()
	calls = mock.calls.FetchVolumes
	mock.lockFetchVolumes.RUnlock()
	return calls
}
